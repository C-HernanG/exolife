# syntax=docker/dockerfile:1.7

# Base image for the ExoLife project.  This image includes all
# runtime and development dependencies and is intended for local
# development, testing and running notebook environments.  A
# non‑root user is created to avoid permission problems when
# mounting volumes from the host.

FROM python:3.11-slim AS base

# Customise pip behaviour to improve reproducibility and reduce
# network noise.  Disable cache to keep layers lean and turn off
# version checking by default.
ENV PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    MPLBACKEND=Agg

# Install system packages required to build native Python
# extensions.  Tini is used as the entrypoint for proper signal
# handling.
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    build-essential \
    git \
    curl \
    ca-certificates \
    tini \
    libopenblas-dev \
    libffi-dev \
    libssl-dev && \
    rm -rf /var/lib/apt/lists/*

# Create a non‑root user and group with a stable UID/GID to avoid
# permission mismatches with host-mounted volumes.  The default
# UID/GID values can be overridden at build time via build args.
ARG UID=1000
ARG GID=1000
RUN groupadd -g ${GID} app && useradd -m -u ${UID} -g ${GID} app

# Set the working directory.  All project files will be copied
# relative to this location.  During development this directory
# corresponds to the root of the source tree.
WORKDIR /workspace

# Copy the project configuration and install dependencies.
# Use the pip cache mount to cache downloaded wheels between builds.
# All dependencies are now managed in pyproject.toml.
COPY pyproject.toml ./pyproject.toml
COPY package/ ./package/
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip && \
    pip install -e .[dev,jupyter,test]

# Copy additional configuration files
COPY config/ ./config/

# Copy entrypoint scripts into a location on the PATH.  These will
# be invoked by docker-compose commands.  Ensure they are marked
# executable after copying.
COPY docker/entrypoints/ /usr/local/bin/
RUN chmod +x /usr/local/bin/*.sh

# Switch to the non‑root user for running the container.  This
# prevents root-owned files from being created on bind mounts.
USER app

# Use tini as the default entrypoint for proper reaping of zombies
# and propagation of signals.  The default command simply starts a
# bash shell but is overridden in docker-compose where needed.
ENTRYPOINT ["/usr/bin/tini", "-g", "--"]
CMD ["bash"]